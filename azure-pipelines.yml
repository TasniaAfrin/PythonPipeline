# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python27:
      python.version: '2.7'

steps:
- task: CmdLine@2
  displayName: 'Install Application Requirements'
  inputs:
    script: 'pip install -r Application/requirements.txt'

- task: CmdLine@2
  displayName: 'Install pytest'
  inputs:
    script: 'pip install pytest && pytest Tests/unit_tests --junitxml=../TestResults/test-results.xml && pip install pycmd && py.cleanup Tests/'

- task: PublishTestResults@2
  displayName: 'Test'
  inputs:
   testResultsFormat: 'JUnit'
   testResultsFiles: '**/test-results.xml'
   searchFolder: '$(Common.TestResultsDirectory)'

- task: ArchiveFiles@2
  displayName: 'Archive Application'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Application/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: ArchiveFiles@2
  displayName: 'Archive Test'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Tests/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Tests$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: 'Publis Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: DownloadBuildArtifacts@1
  displayName: 'Download Build Artifacts'
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: $(System.ArtifactsDirectory)

- task: AzureCLI@2
  displayName: 'Configure Resources'
  inputs:
    azureSubscription: 'Visual Studio Enterprise – MPN(ab1ad37f-a64b-457e-9de2-d6589579fe0c)'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Azure resources required to deploy Python Web app
      az group create --location $(Location) --name $(ResourceGroup)
      az appservice plan create --name $(appservice-plan) --resource-group $(ResourceGroup) --sku $(sku)
      az webapp create --name $(appservice-name) --resource-group $(ResourceGroup) --plan $(appservice-plan)

- task: AzureAppServiceManage@0
  displayName: 'Install Python extension'
  inputs:
    azureSubscription: 'Visual Studio Enterprise – MPN(ab1ad37f-a64b-457e-9de2-d6589579fe0c)'
    Action: 'Install Extensions'
    WebAppName: '$(appservice-name)'
    ExtensionsList: 'azureappservice-python354x86'
    OutputVariable: 'PYTHON_EXT'

- task: AzureRmWebAppDeployment@4
  displayName: 'Web app deploymen'
  name: 'webapp' 
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Visual Studio Enterprise – MPN(ab1ad37f-a64b-457e-9de2-d6589579fe0c)'
    appType: 'webApp'
    WebAppName: '$(appservice-name)'
    packageForLinux: '$(System.ArtifactsDirectory)/Application*.zip'
    ScriptType: 'Inline Script'
    InlineScript: |
      @echo off
      if NOT exist requirements.txt (
       echo No Requirements.txt found.
       EXIT /b 0
      )
      if NOT exist "$(PYTHON_EXT)/python.exe" (
       echo Python extension not available >&2
       EXIT /b 1
      )
      echo Installing dependencies
      call "$(PYTHON_EXT)/python.exe" -m pip install -U setuptools
      if %errorlevel% NEQ 0 (
       echo Failed to install setuptools >&2
       EXIT /b 1
      )
      call "$(PYTHON_EXT)/python.exe" -m pip install -r requirements.txt
      if %errorlevel% NEQ 0 (
       echo Failed to install dependencies>&2
       EXIT /b 1
      )
    WebConfigParameters: '-WSGI_HANDLER "django.core.wsgi.get_wsgi_application()" -DJANGO_SETTINGS_MODULE "python_webapp_django.settings" -PYTHON_PATH "$(PYTHON_EXT)\python.exe"  -PYTHON_WFASTCGI_PATH "$(PYTHON_EXT)\wfastcgi.py"  -appType python_Django'
    
- task: ExtractFiles@1
  displayName: 'Extract test'
  inputs:
    archiveFilePatterns: 'Tests*.zip'
    destinationFolder: '$(System.DefaultWorkingDirectory)/Tests/'
    cleanDestinationFolder: true
    overwriteExistingFiles: false

- task: CmdLine@2
  displayName: 'Install selenium'
  inputs:
    script: 'pip install selenium && pip install pytest && pytest Tests/functional_tests/ --webAppUrl=$(webapp.AppServiceApplicationUrl) --junitxml=TestResults/test-results.xml'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml'